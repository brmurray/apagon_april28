```{python}
from importlib import reload

import pandas as pd
import numpy as np
from scipy.io import loadmat
from scipy import signal

from datetime import datetime
import pytz

import matplotlib.pyplot as plt
import plotly
import plotly.graph_objects as go
import matplotlib.colors as colors
import matplotlib.gridspec as gridspec

# Project-Specific Imports
import apagon_april28.plots as plots

# relative paths using pyprojroot (see pvwatts_sandbox/paths.py)
from apagon_april28.paths import root, data_dir, shareable_dir, notebooks_dir, figures_dir
import apagon_april28.constants as constants

pmu_aliases = constants.pmu_aliases

# Cleaning the PMU Data
# Load the .mat file
pmu_df_raw = pd.read_csv(data_dir / 'external' /'28042025_Spain and Portugal_UTCtime.csv')

# Clean up column names by removing ":Frequency" suffix
pmu_df_raw.columns = pmu_df_raw.columns.str.replace(':Frequency', '')

# Convert timestamp to datetime with UTC timezone
pmu_df_raw['time'] = pd.to_datetime(pmu_df_raw['Timestamp'], format='%Y/%m/%d %H:%M:%S.%f', utc=True)
pmu_df_raw['time'] = pmu_df_raw['time'].dt.tz_convert('Europe/Madrid')
pmu_df_raw = pmu_df_raw.drop(columns=['Timestamp'])
pmu_df_raw = pmu_df_raw.set_index('time')

# drop any rows where ES_Malaga is NaN
pmu_df = pmu_df_raw.dropna(subset=['ES_Malaga'])

print("First PMU timestamp: ", pmu_df_raw.index.min())
print("Last PMU timestamp: ", pmu_df_raw.index.max())
```

# Grid Events
## Overview
```{python}
# Overview
reload(plots)

# Plot Parameters
pmus_to_plot = pmu_aliases
overview_t_start = pd.to_datetime('2025-04-28 12:10:00').tz_localize('Europe/Madrid')
overview_t_end = pd.to_datetime('2025-04-28 12:45:00').tz_localize('Europe/Madrid')

fig = plots.create_frequency_plot(pmu_df, overview_t_start, overview_t_end, pmu_aliases, "Grid Frequency Measurements Across Europe")
fig.show()
fig.write_image(figures_dir / "overview.png", scale=1)
```

## Early Oscillations
```{python}
# First Oscillation
reload(plots)

# Plot Parameters
pmus_to_plot = pmu_aliases
oscillation1_t_start = pd.to_datetime('2025-04-28 12:10:00').tz_localize('Europe/Madrid')
oscillation1_t_end = pd.to_datetime('2025-04-28 12:17:30').tz_localize('Europe/Madrid')

fig = plots.create_frequency_plot(pmu_df, oscillation1_t_start, oscillation1_t_end, pmu_aliases, "Early Oscillations")
fig.show()
fig.write_image(figures_dir / "oscillation1.png")
```


## Bigger Oscillations
```{python}
# Second Oscillation
reload(plots)

# Plot Parameters
pmus_to_plot = pmu_aliases
oscillation2_t_start = pd.to_datetime('2025-04-28 12:19:00').tz_localize('Europe/Madrid')
oscillation2_t_end = pd.to_datetime('2025-04-28 12:22:00').tz_localize('Europe/Madrid')

fig = plots.create_frequency_plot(pmu_df, oscillation2_t_start, oscillation2_t_end, pmu_aliases, "Bigger Oscillations")
fig.show()
fig.write_image(figures_dir / "oscillation2.png")
```


## DFD @ 12:30
```{python}
# Second Oscillation
reload(plots)

# Plot Parameters
pmus_to_plot = pmu_aliases
dfd_t_start = pd.to_datetime('2025-04-28 12:29:10').tz_localize('Europe/Madrid')
dfd_t_end = pd.to_datetime('2025-04-28 12:30:50').tz_localize('Europe/Madrid')

fig = plots.create_frequency_plot(pmu_df, dfd_t_start, dfd_t_end, pmu_aliases, "DFD @ 12:30")
fig.show()
fig.write_image(figures_dir / "dfd.png")
```


## Separation
```{python}
# Separation
reload(plots)

# Plot Parameters
pmus_to_plot = pmu_aliases
first_loss = pd.to_datetime('2025-04-28 12:33:16.5').tz_localize('Europe/Madrid')
second_loss = pd.to_datetime('2025-04-28 12:33:17.8').tz_localize('Europe/Madrid')
separation = pd.to_datetime('2025-04-28 12:33:19.4').tz_localize('Europe/Madrid')
events = [first_loss, second_loss, separation]

separation_t_start = pd.to_datetime('2025-04-28 12:32:45').tz_localize('Europe/Madrid')
separation_t_end = pd.to_datetime('2025-04-28 12:33:30').tz_localize('Europe/Madrid')

fig = plots.create_frequency_plot(
    pmu_df = pmu_df,
    start_time = separation_t_start,
    end_time = separation_t_end,
    pmu_aliases = pmu_aliases,
    title_text = "Separation",
    ymin=49.75,
    ymax=50.05,
    events = events
)
fig.show()
fig.write_image(figures_dir / "separation.png")
```

# ROCOF
```{python}
reload(plots)
# Instantaneous RoCoF for all signals
rocof_df = pmu_df.copy(deep=True)
rocof_df = rocof_df.diff()/100e-3
rocof_500ms_df = rocof_df.rolling(5).mean()
rocof_1000ms_df = rocof_df.rolling(10).mean()
rocof_2000ms_df = rocof_df.rolling(20).mean()
rocof_es_df = rocof_df['ES_Malaga'].to_frame()

# Moving-Average RoCoF for ES_Malaga
rocof_es_df = rocof_es_df.rename(columns={'ES_Malaga': 'rocof_instantaneous'})
rocof_es_df['rocof_500ms'] = rocof_500ms_df['ES_Malaga']
rocof_es_df['rocof_1000ms'] = rocof_1000ms_df['ES_Malaga']
rocof_es_df['rocof_2000ms'] = rocof_2000ms_df['ES_Malaga']

# RoCoF Comparison Plot
#pmus_to_plot = {k: v for k, v in pmu_aliases.items() if k != 'HR_STER'}
pmus_to_plot = pmu_aliases
t_rocof_overview_start = pd.to_datetime('2025-04-28 12:13:00').tz_localize('Europe/Madrid')
t_rocof_overview_end = pd.to_datetime('2025-04-28 12:34:00').tz_localize('Europe/Madrid')
fig = plots.create_rocof_comparison_plot(rocof_df, t_rocof_overview_start, t_rocof_overview_end, pmus_to_plot, "ROCOF")
fig.show()
fig.write_image(figures_dir / "rocof_overview.png")

# RoCoF Closeup Plot
t_rocof_closeup_start = pd.to_datetime('2025-04-28 12:33:10').tz_localize('Europe/Madrid')
t_rocof_closeup_end = pd.to_datetime('2025-04-28 12:33:25').tz_localize('Europe/Madrid') 
fig = plots.create_rocof_closeup_plot(rocof_es_df, t_rocof_closeup_start, t_rocof_closeup_end, "ROCOF Moving Averages", ymin=-1.5, ymax=0.25)
fig.show()
fig.write_image(figures_dir / "rocof_closeup.png")
```


# Spectrogram
- SSOs range from 7-30 Hz [@neso_SSOIdentificationWP1_2023]
- ES_Malaga has 100ms sample time (10 Hz) -> Fastest we could see would be 20 Hz
- April 28 oscillations appear ~=5 seconds
```{python}
reload(plots)

fs = 10  # Sampling frequency for 100ms data
window_minutes = 1
window_size = int(window_minutes * 60 * fs)  # Convert minutes to samples

# Trim the full PMU dataframe to the desired time range
t_spectrogram_start = pd.to_datetime('2025-04-28 12:13:00').tz_localize('Europe/Madrid')
t_spectrogram_end = pd.to_datetime('2025-04-28 12:33:30').tz_localize('Europe/Madrid')

# Which column to plot
pmu_name = 'ES_Malaga'

# Create spectrogram
spec_data = plots.create_grid_frequency_spectrogram(
    pmu_df[pmu_name].loc[t_spectrogram_start:t_spectrogram_end], 
    pmu_name=pmu_name,
    fs=fs, 
    window_size=window_size, 
    plot=True
)

fig = spec_data['fig']
fig.show()
fig.savefig(figures_dir / f"spectrogram_{pmu_name}.png")
```


