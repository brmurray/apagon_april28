# Inertia Estimation


```{python}
# set up
import pandas as pd
import matplotlib.pyplot as plt
import plotly
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
import pytz
from scipy.io import loadmat


# relative paths using pyprojroot (see pvwatts_sandbox/paths.py)
from apagon_april28.paths import root, data_dir, notebooks_dir, figures_dir
from apagon_april28.constants import generation_type_colors, generation_type_column_order
```

# Inertia on April 28
## Generation data
```{python}
# Generation data
path_bzn_es_april28 = data_dir / 'external' / 'cta_es_Actual Generation per Production Type_202501010000-202601010000.csv'
gen_es_df = pd.read_csv(path_bzn_es_april28)
gen_es_df['datetime'] = pd.to_datetime(gen_es_df['MTU'].str.split(' - ').str[0], format='%d.%m.%Y %H:%M')
gen_es_df = gen_es_df.set_index('datetime')
gen_es_df = gen_es_df.drop(['MTU', 'Area'], axis=1)


# Rename columns by removing " - Actual Aggregated [MW]"
gen_es_df = gen_es_df.drop('Hydro Pumped Storage - Actual Consumption [MW]', axis=1)
gen_es_df.columns = gen_es_df.columns.str.replace(' - Actual Aggregated [MW]', '')

# Sort columns by generation_type_column_order
gen_es_df = gen_es_df[generation_type_column_order]

# Convert all columns to numeric, set errors to NaN
gen_es_df = gen_es_df.apply(pd.to_numeric, errors='coerce')

# Remove columns with all values below 10 MW
# Find columns where maximum generation is less than 50 MW
low_gen_cols = gen_es_df.columns[gen_es_df.max() < 50]
gen_es_df = gen_es_df.drop(columns=low_gen_cols)


# Get the total generation and the percentage of each generation type
total_gen = gen_es_df.sum(axis=1)
pct_es_df = gen_es_df.div(total_gen, axis=0)


``` 




### Add to db
```{python}
#gen_es_long = gen_es_df.reset_index().melt(id_vars=['datetime'], var_name='generation_type', value_name='generation')
# # Write generation data to duckdb
# import duckdb

# # Create connection to duckdb database
# con = duckdb.connect('entsoe.db')

# # Write dataframe to duckdb table
# con.execute("DROP TABLE IF EXISTS generation")
# con.execute("CREATE TABLE generation AS SELECT * FROM gen_es_df")
# con.close()
```



## Inertia Estimation
- inertia constants from entso-e_InertiaRoCoF_2020 ("Inertia and Rate of Change of Frequency (RoCoF)", 16 Dec 2020)
```{python}

inertia_constants = pd.read_csv(root / 'apagon_april28' / 'inertia_constants.csv')

inertia_df = pd.DataFrame(index=pct_es_df.index)
for col in pct_es_df.columns:
    h_value = inertia_constants.loc[inertia_constants['generation_type'] == col, 'h_entsoe_sec'].values
    if len(h_value) > 0:  # Only multiply if we have an inertia constant for this type
        inertia_df[col] = pct_es_df[col] * h_value[0]
    else:
        print(f"No inertia constant for {col}")

inertia_df['Total Inertia'] = inertia_df.sum(axis=1)


```


# Plots
## Generation by type - April 28
```{python}
# Limit to 2025-04-28
gen_es_apr28_df = gen_es_df[gen_es_df.index.date == pd.Timestamp('2025-04-28').date()]

# Find and remove columns where maximum generation is less than 50 MW
low_gen_cols = gen_es_apr28_df.columns[gen_es_apr28_df.max() < 50]
gen_es_apr28_df = gen_es_apr28_df.drop(columns=low_gen_cols)



# Create stacked bar chart
fig = go.Figure()

# Add traces for each generation type
for column in gen_es_apr28_df.columns:
    fig.add_trace(
        go.Bar(
            name=column,
            x=gen_es_apr28_df.index,
            y=gen_es_apr28_df[column],
            hovertemplate="%{y:.2f} s<extra></extra>",
            marker_color=generation_type_colors[column]
        )
    )

# Update layout
fig.update_layout(
    barmode='stack',
    title='Hydro ramped down as solar ramped up through the morning of 28th April 2025',
    xaxis_title=None,
    yaxis_title='Spain Generation [MW]',
    yaxis=dict(
        tickmode='array',
        tickvals=list(range(5000, int(total_gen.max()) + 5000, 5000))
    ),
    hovermode='x unified',
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    height = 800,
    width = 1600,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

fig.show()
fig.write_image(figures_dir / "generation_mix_spain_20250428.png")
```

## Plot Inertia on April 28
```{python}
inertia_contributor_columns = ['Nuclear', 'Fossil Gas', 'Hydro Water Reservoir', 'Hydro Run-of-river and poundage', 'Hydro Pumped Storage']

inertia_apr28_df = inertia_df[inertia_df.index.date == pd.Timestamp('2025-04-28').date()]

# Create stacked bar chart
fig = go.Figure()

# Add traces for each generation type
for column in inertia_contributor_columns:
    fig.add_trace(
        go.Bar(
            name=column,
            x=inertia_apr28_df.index,
            y=inertia_apr28_df[column],
            hovertemplate="%{y:.2f} s<extra></extra>",
            marker_color=generation_type_colors[column]
        )
    )
# Add horizontal line at y=2 with annotation
fig.add_hline(
    y=2, 
    line_dash="dash", 
    line_color="red"
)

fig.add_annotation(
    text="ENTSO-E Suggested Inertia Lower Bound",
    x=0.5,
    y=2.1,
    xref="paper",
    yref="y",
    showarrow=False,
    font=dict(
        size=12,
        color="red"
    )
)


# Update layout
fig.update_layout(
    barmode='stack',
    title='By 9am on 28th April 2025, Spain System Inertia was already very low',
    xaxis_title=None,
    yaxis_title='Inertia Constant [seconds]',
    hovermode='x unified',
    yaxis=dict(
        tickmode='array',
        tickvals=[0.5, 1, 1.5, 2, 2.5, 3]
    ),

    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    height = 800,
    width = 1600,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

fig.show()
fig.write_image(figures_dir / "inertia_by_generation_type_20250428.png")


```

## Inertia for the whole year
```{python}

inertia_df['hour'] = inertia_df.index.hour
inertia_df['minute'] = inertia_df.index.minute
inertia_df['time_of_day'] = inertia_df['hour'] + inertia_df['minute']/60
inertia_df['date'] = inertia_df.index.date.astype(str)

# Set values below 0.2 to NA
inertia_df['Total Inertia'] = inertia_df['Total Inertia'].where(inertia_df['Total Inertia'] >= 0.2)


# Plot total inertia for the whole year
fig = go.Figure()

for date in inertia_df['date'].unique():
    day_data = inertia_df[inertia_df['date'] == date]

    fig.add_trace(
        go.Scatter(
            x=day_data['time_of_day'],
            y=day_data['Total Inertia'],
            mode='lines',
            name=date,
            line=dict(width=0.75, color='grey'),
            showlegend=False
        )
    )

# Add April 28th data
april28_data = inertia_df[inertia_df['date'] == '2025-04-28']
fig.add_trace(
    go.Scatter(
        x=april28_data['time_of_day'],
        y=april28_data['Total Inertia'],
        mode='lines',
        name='April 28th 2025',
        line=dict(width=3, color='red'),
        showlegend=False
    )
)

fig.add_annotation(
    text="April 28th",
    x=1,
    y=5.2,  # Just slightly above ymax
    showarrow=False,
    font=dict(color="red", size=16)
)

fig.add_annotation(
    text="March-April 2025",
    x=4,
    y=5.2,  
    showarrow=False,
    font=dict(color="grey", size=16)
)


# Add horizontal line at ENTSO-E suggested minimum
fig.add_hline(y=2, line_width=2, line_dash="dash", line_color="red")

# Add annotation for ENTSO-E line
fig.add_annotation(
    text="ENTSO-E Suggested Inertia Lower Bound",
    x=.05,
    y=1.8,
    xref="paper",
    yref="y", 
    showarrow=False,
    font=dict(
        size=12,
        color="red"
    ),
    bgcolor="white",
)

# Update layout
fig.update_layout(
    title='Spain System Inertia Throughout 2025',
    xaxis_title='Hour of Day',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(3, 24, 3)),
        ticktext=[f"{hour:02d}:00" for hour in range(3, 24, 3)],
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis_title='Inertia Constant [seconds]',
    yaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    hovermode='x unified',
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),

    height=600,
    width=1200,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

fig.show()
fig.write_image(figures_dir / "total_inertia_2025.png")


```

# Inertia in the rest of Europe
```{python}



```




