# Inertia Estimation


```{python}
# setup
import pandas as pd
import matplotlib.pyplot as plt
import plotly
import plotly.graph_objects as go
import numpy as np
from datetime import datetime
import pytz
import scipy.io
from scipy.io import loadmat


# relative paths using pyprojroot (see pvwatts_sandbox/paths.py)
from apagon_april28.paths import root, data_dir, shareable_dir, notebooks_dir, figures_dir
from apagon_april28.constants import generation_type_colors, generation_type_column_order
```

# Inertia on April 28
## Generation data
```{python}
# Load generation data from ENTSO-E file.
def load_entsoe_generation_data(path_cta_es_2025):
    """Load and process generation data from ENTSO-E file.
    
    Args:
        path_cta_es_2025: Path to the CSV file containing generation data
        
    Returns:
        pd.DataFrame: Processed generation data with datetime index
    """
    gen_es_2025_df = pd.read_csv(path_cta_es_2025)
    gen_es_2025_df['datetime'] = pd.to_datetime(gen_es_2025_df['MTU'].str.split(' - ').str[0], format='%d.%m.%Y %H:%M')
    gen_es_2025_df = gen_es_2025_df.set_index('datetime')
    gen_es_2025_df = gen_es_2025_df.drop(['MTU', 'Area'], axis=1)

    # Rename columns by removing " - Actual Aggregated [MW]"
    gen_es_2025_df = gen_es_2025_df.drop('Hydro Pumped Storage - Actual Consumption [MW]', axis=1)
    gen_es_2025_df.columns = gen_es_2025_df.columns.str.replace(' - Actual Aggregated [MW]', '')

    # Sort columns by generation_type_column_order
    gen_es_2025_df = gen_es_2025_df[generation_type_column_order]

    # Convert all columns to numeric, set errors to NaN
    gen_es_2025_df = gen_es_2025_df.apply(pd.to_numeric, errors='coerce')
    
    return gen_es_2025_df


# Load inertia constants (from entsoe_InertiaRoCoF_2020)
inertia_constants = pd.read_csv(root / 'apagon_april28' / 'inertia_constants.csv')


use_these_gen_cols = ['Nuclear', 'Fossil Hard coal', 'Fossil Gas', 'Hydro Water Reservoir',
       'Hydro Run-of-river and poundage', 'Hydro Pumped Storage',
       'Wind Onshore', 'Biomass', 'Other renewable', 'Waste', 'Solar']

gen_df_list, total_gen_list, pct_es_df_list, inertia_df_list = [], [], [], []
for year in [2015, 2023, 2024, 2025]:
    gen_es_df = load_entsoe_generation_data(shareable_dir / 'external' / f'cta_es_Actual Generation per Production Type_{year}01010000-{year+1}01010000.csv')
    gen_es_df = gen_es_df[use_these_gen_cols]

    # Remove columns with all values below 10 MW
    # Find columns where maximum generation is less than 50 MW
    low_gen_cols = gen_es_df.columns[gen_es_df.max() < 50]
    gen_es_df = gen_es_df.drop(columns=low_gen_cols)


    # Get the total generation and the percentage of each generation type
    gen_es_df['Total'] = gen_es_df.sum(axis=1)
    pct_es_df = gen_es_df.div(gen_es_df['Total'], axis=0)

    gen_df_list.append(gen_es_df)
    #total_gen_list.append(total_gen)
    pct_es_df_list.append(pct_es_df)


    # Calculate inertia
    inertia_df = pd.DataFrame(index=pct_es_df.index)
    for col in pct_es_df.columns:
        if col == 'Total':
            print(f"Skipping Total column ({year})")
            continue
        h_value = inertia_constants.loc[inertia_constants['generation_type'] == col, 'h_entsoe_sec'].values
        if len(h_value) > 0:  # Only multiply if we have an inertia constant for this type
            inertia_df[col] = pct_es_df[col] * h_value[0]
        else:
            print(f"No inertia constant for {col}")

    inertia_df['Total Inertia'] = inertia_df.sum(axis=1)
    inertia_df['year'] = year   
    inertia_df['month'] = inertia_df.index.month
    inertia_df['day'] = inertia_df.index.day
    inertia_df['hour'] = inertia_df.index.hour.astype(int)
    # Replace values less than 0.1 with NaN
    inertia_df['Total Inertia'] = inertia_df['Total Inertia'].mask(inertia_df['Total Inertia'] < 0.1)

    synthetic_inertia_constant = 4
    synthetic_inertia_adoption_rate = 0.333
    inertia_df['Synthetic Inertia'] = pct_es_df['Solar'] * synthetic_inertia_constant * synthetic_inertia_adoption_rate

    inertia_df_list.append(inertia_df)

# concatenate all inertia dataframes
inertia_df = pd.concat(inertia_df_list)
``` 


## Inertia Estimation
- inertia constants from entsoe_InertiaRoCoF_2020 ("Inertia and Rate of Change of Frequency (RoCoF)", 16 Dec 2020)
```{python}

# Down-select to April data only

# Group by date to get daily profiles
# Reset index to ensure hour=0 is included, then group and set index again
daily_inertia = inertia_df.reset_index().groupby(['year', 'month', 'day', 'hour']).mean()

april_inertia = daily_inertia.xs(4, level='month')

# Create figure
fig = go.Figure()

# Get unique year-day combinations
years = april_inertia.index.get_level_values('year').unique()
days = april_inertia.index.get_level_values('day').unique()

# Color scale for years
colors = ['#ADD8E6', '#90EE90', '#D3D3D3', '#808080']  # light blue, light green, light grey, medium grey
colors_darker = ['#87CEEB', '#98FB98', '#D3D3D3', '#808080']  # darker versions of the same colors
year_colors = dict(zip(years, colors))

# Plot each day as a separate line
text_x_bump = 0.9
text_y_bump = -0.2
for i, year in enumerate(years):
    for day in days:
        try:
            # Get data for this year/day combination
            day_data = april_inertia.xs((year, day), level=['year', 'day'])

            if day == 28 and year == 2025:
                continue
            
            fig.add_trace(
                go.Scatter(
                    x=day_data.index.get_level_values('hour'),
                    y=day_data['Total Inertia'],
                    mode='lines',
                    line=dict(color=year_colors[year], width=1),
                    name=f'{year}',
                    hovertemplate=f"Year: {year}<br>Day: {day}<br>Hour: %{{x}}<br>Inertia: %{{y:.1f}}<extra></extra>",
                    showlegend=False
                )
            )

            # Add year annotation at y=4.3
            fig.add_annotation(
                x=12.5 + text_x_bump * i,  # Center of x-axis
                y=4.5 + text_y_bump * i,
                text=f"{year}",
                showarrow=False,
                font=dict(color=colors_darker[i], size=16),
                bgcolor='white'
            )
        except KeyError:
            continue  # Skip if this combination doesn't exist


# Add special trace for April 28, 2025
add_april_28_total_inertia = True
if add_april_28_total_inertia:
    april28_data = april_inertia.xs((2025, 28), level=['year', 'day'])
    # Set values after hour 12 to 0
    april28_data.loc[april28_data.index.get_level_values('hour') > 12, 'Total Inertia'] = np.nan
    fig.add_trace(
        go.Scatter(
            x=april28_data.index.get_level_values('hour'),
            y=april28_data['Total Inertia'],
            mode='lines',
            line=dict(color='red', width=3),
            name='April 28, 2025',
            hovertemplate="April 28, 2025<br>Hour: %{x}<br>Inertia: %{y:.1f}<extra></extra>",
            showlegend=False
        )
    )

    fig.add_annotation(
        x=12.2,  # Center of x-axis
        y=1.2,
        xref="x",
        xanchor='left',
        yanchor='middle',
        text="April 28, 2025, Rotational Inertia",
        showarrow=False,
        font=dict(color='red', size=18),
        bgcolor='rgba(255, 255, 255, 1)'
    )

add_april_28_synthetic_inertia = True   
if add_april_28_synthetic_inertia:
    april28_data = april_inertia.xs((2025, 28), level=['year', 'day'])
    april28_data.loc[april28_data.index.get_level_values('hour') > 12, 'Total Inertia'] = np.nan

    fig.add_trace(
        go.Scatter(
            x=april28_data.index.get_level_values('hour'),
            y=april28_data['Total Inertia'] + april28_data['Synthetic Inertia'],
            mode='lines',
            line=dict(color='blue', width=3),
            name='Synthetic Inertia',
            hovertemplate="April 28, 2025<br>Hour: %{x}<br>Inertia: %{y:.1f}<extra></extra>",
            showlegend=False
        )
    )

    fig.add_annotation(
        x=12.2,  # Center of x-axis
        y=2.05,
        xref="x",
        xanchor='left',
        yanchor='middle',
        text="April 28, with Synthetic Inertia",
        showarrow=False,
        font=dict(color='blue', size=18),
        bgcolor='white'
    )


# Update layout
fig.update_layout(
    title=dict(
        text="Daily Physical Inertia Profiles in Spain, April 2015-2025<br><sup style='color: gray; font-size: 0.8em;'>April 28, 2025 was not unprecedented, and synthetic inertia via solar generators would have kept total inertia within historical norms.</sup>",
        y=0.95
    ),
    xaxis_title=None,
    yaxis_title='Spanish Grid Inertia Constant [seconds]',
    hovermode='x unified',
    showlegend=True,
    height=600,
    width=1200,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=50, b=50),
    xaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgray',
        ticktext=[f'{i:02d}:00' for i in [3,6,9,12,15,18,21]],
        tickvals=[3,6,9,12,15,18,21]
    ),
    yaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgray'
    )
)

# Add Lemur logo
from PIL import Image 
fig.add_layout_image(
    dict(
        source=Image.open(figures_dir / "lemur_logo_yellow.png"),
        xref="paper",
        yref="paper",
        x=0,
        y=0,
        sizex=0.2,
        sizey=0.2,
        xanchor="left",
        yanchor="bottom"
    )
)



fig.show()
fig.write_image(figures_dir / "inertia_spain_2015_2025.png")



```


# Plots
## Generation by type - April 28
```{python}
# Limit to 2025-04-28
gen_es_apr28_df = gen_es_df[gen_es_df.index.date == pd.Timestamp('2025-04-28').date()]

# Find and remove columns where maximum generation is less than 50 MW
low_gen_cols = gen_es_apr28_df.columns[gen_es_apr28_df.max() < 50]
gen_es_apr28_df = gen_es_apr28_df.drop(columns=low_gen_cols)



# Create stacked bar chart
fig = go.Figure()

# Add traces for each generation type
for column in gen_es_apr28_df.columns:
    fig.add_trace(
        go.Bar(
            name=column,
            x=gen_es_apr28_df.index,
            y=gen_es_apr28_df[column],
            hovertemplate="%{y:.2f} s<extra></extra>",
            marker_color=generation_type_colors[column]
        )
    )

# Update layout
fig.update_layout(
    barmode='stack',
    title='Hydro ramped down as solar ramped up through the morning of 28th April 2025',
    xaxis_title=None,
    yaxis_title='Spain Generation [MW]',
    yaxis=dict(
        tickmode='array',
        tickvals=list(range(5000, int(total_gen.max()) + 5000, 5000))
    ),
    hovermode='x unified',
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    height = 800,
    width = 1600,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

# Add Lemur logo
from PIL import Image 
fig.add_layout_image(
    dict(
        source=Image.open(figures_dir / "lemur_logo_yellow.png"),
        xref="paper",
        yref="paper",
        x=0,
        y=0,
        sizex=0.2,
        sizey=0.2,
        xanchor="left",
        yanchor="bottom"
    )
)

fig.show()
fig.write_image(figures_dir / "generation_mix_spain_20250428.png")
```

## Plot Inertia on April 28
```{python}
inertia_contributor_columns = ['Nuclear', 'Fossil Gas', 'Hydro Water Reservoir', 'Hydro Run-of-river and poundage', 'Hydro Pumped Storage']

inertia_df = inertia_df_list[-2]

inertia_apr28_df = inertia_df[inertia_df.index.date == pd.Timestamp('2025-04-28').date()]

# Create stacked bar chart
fig = go.Figure()

# Add traces for each generation type
for column in inertia_contributor_columns:
    fig.add_trace(
        go.Bar(
            name=column,
            x=inertia_apr28_df.index,
            y=inertia_apr28_df[column],
            hovertemplate="%{y:.2f} s<extra></extra>",
            marker_color=generation_type_colors[column]
        )
    )
# Add horizontal line at y=2 with annotation
fig.add_hline(
    y=2, 
    line_dash="dash", 
    line_color="red"
)

fig.add_annotation(
    text="ENTSO-E Suggested Inertia Lower Bound",
    x=0.5,
    y=2.1,
    xref="paper",
    yref="y",
    showarrow=False,
    font=dict(
        size=12,
        color="red"
    )
)


# Update layout
fig.update_layout(
    barmode='stack',
    title='By 9am on 28th April 2025, Spain System Inertia was already very low',
    xaxis_title=None,
    yaxis_title='Inertia Constant [seconds]',
    hovermode='x unified',
    yaxis=dict(
        tickmode='array',
        tickvals=[0.5, 1, 1.5, 2, 2.5, 3]
    ),

    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),
    height = 800,
    width = 1600,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

# Add Lemur logo
from PIL import Image 
fig.add_layout_image(
    dict(
        source=Image.open(figures_dir / "lemur_logo_yellow.png"),
        xref="paper",
        yref="paper",
        x=0,
        y=0,
        sizex=0.2,
        sizey=0.2,
        xanchor="left",
        yanchor="bottom"
    )
)

fig.show()
fig.write_image(figures_dir / "inertia_by_generation_type_20250428.png")


```

## Inertia for the whole year
```{python}

inertia_df['hour'] = inertia_df.index.hour
inertia_df['minute'] = inertia_df.index.minute
inertia_df['time_of_day'] = inertia_df['hour'] + inertia_df['minute']/60
inertia_df['date'] = inertia_df.index.date.astype(str)

# Set values below 0.2 to NA
inertia_df['Total Inertia'] = inertia_df['Total Inertia'].where(inertia_df['Total Inertia'] >= 0.2)


# Plot total inertia for the whole year
fig = go.Figure()

for date in inertia_df['date'].unique():
    day_data = inertia_df[inertia_df['date'] == date]

    fig.add_trace(
        go.Scatter(
            x=day_data['time_of_day'],
            y=day_data['Total Inertia'],
            mode='lines',
            name=date,
            line=dict(width=0.75, color='grey'),
            showlegend=False
        )
    )

# Add April 28th data
april28_data = inertia_df[inertia_df['date'] == '2025-04-28']
fig.add_trace(
    go.Scatter(
        x=april28_data['time_of_day'],
        y=april28_data['Total Inertia'],
        mode='lines',
        name='April 28th 2025',
        line=dict(width=3, color='red'),
        showlegend=False
    )
)

fig.add_annotation(
    text="April 28th",
    x=1,
    y=5.2,  # Just slightly above ymax
    showarrow=False,
    font=dict(color="red", size=16)
)

fig.add_annotation(
    text="March-April 2025",
    x=4,
    y=5.2,  
    showarrow=False,
    font=dict(color="grey", size=16)
)


# Add horizontal line at ENTSO-E suggested minimum
fig.add_hline(y=2, line_width=2, line_dash="dash", line_color="red")

# Add annotation for ENTSO-E line
fig.add_annotation(
    text="ENTSO-E Suggested Inertia Lower Bound",
    x=.05,
    y=1.8,
    xref="paper",
    yref="y", 
    showarrow=False,
    font=dict(
        size=12,
        color="red"
    ),
    bgcolor="white",
)

# Update layout
fig.update_layout(
    title='Spain System Inertia Throughout 2025',
    xaxis_title='Hour of Day',
    xaxis=dict(
        tickmode='array',
        tickvals=list(range(3, 24, 3)),
        ticktext=[f"{hour:02d}:00" for hour in range(3, 24, 3)],
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    yaxis_title='Inertia Constant [seconds]',
    yaxis=dict(
        showgrid=True,
        gridwidth=1,
        gridcolor='lightgrey'
    ),
    hovermode='x unified',
    showlegend=True,
    legend=dict(
        orientation="h",
        yanchor="bottom",
        y=1.02,
        xanchor="right",
        x=1
    ),

    height=600,
    width=1200,
    plot_bgcolor='white',
    paper_bgcolor='white',
    margin=dict(l=50, r=50, t=90, b=60)
)

# Add Lemur logo
from PIL import Image 
fig.add_layout_image(
    dict(
        source=Image.open(figures_dir / "lemur_logo_yellow.png"),
        xref="paper",
        yref="paper",
        x=0,
        y=0,
        sizex=0.2,
        sizey=0.2,
        xanchor="left",
        yanchor="bottom"
    )
)

fig.show()
fig.write_image(figures_dir / "total_inertia_2025.png")


```

# Inertia in the rest of Europe
```{python}



```




